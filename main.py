import os
import requests
import csv
import json
from time import sleep

# NOTE(const): –ß—Ç–æ–±—ã –¥–ª—è –º–µ—Ç–æ–¥–∞ dt.datetime.fromtimestamp() –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞—Ç—å dt.UTC
import datetime as dt

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY    = "<–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á API —Å—é–¥–∞>"
BOARD_ID   = "11111111-1111-1111-1111-111111111111"
#COLUMN_ID  = "22222222-2222-2222-2222-222222222222" # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
BASE_URL   = "https://ru.yougile.com/api-v2"
HEADERS    = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

CSV_TASK_ID_HEADER = "task_id"

CSV_FILE_PATH = os.path.join(r".", "yougile_tasks.csv")

# NOTE(const): id —Å—Ç–∏–∫–µ—Ä–æ–≤ (—Ç.–µ. –≥—Ä—É–ø–ø —Å—Ç–∏–∫–µ—Ä–æ–≤), –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –ø–æ api
HARDCODED_STICKERS = {
    "33333333-3333-3333-3333-333333333333": "–°—Ç–∏–∫–µ—Ä 1",
    "44444444-4444-4444-4444-444444444444": "–°—Ç–∏–∫–µ—Ä 2",
    "55555555-5555-5555-5555-555555555555": "–°—Ç–∏–∫–µ—Ä 3",
}

# NOTE(const): –î–ª—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤—ã–≥—Ä—É–∂–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –∑–∞–¥–∞—á, —É
# –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞
COLUMNS_TO_CHECK_DEADLINE_IDS = [
    "66666666-6666-6666-6666-666666666666", # "–ì–æ—Ç–æ–≤–æ"
]

# NOTE(const): –ö–æ–ª–æ–Ω–∫–∏ —Å id –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–æ–±—â–µ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
EXCLUDE_COLUMNS_WITH_IDS = [
    "77777777-7777-7777-7777-777777777777", # "–ü—Ä–æ–±–ª–µ–º–∞"
]

def log(msg):
    print(f"üìù {msg}")

def get_datetime(task_timestamp):
    """
    NOTE(const): Python –≤—ã–¥–∞–≤–∞–ª DeprecationWarning –Ω–∞
        datetime.datetime.utcfromtimestamp(ts / 1000)
    –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        datetime.datetime.fromtimestamp(timestamp, datetime.UTC)
    """
    return dt.datetime.fromtimestamp(task_timestamp / 1000, dt.UTC)

def format_timestamp(task_timestamp):
    """
    NOTE(const): –ï—Å–ª–∏ —É –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞, —Ç–æ –ø–æ–º–µ—á–∞–µ–º task_timestamp –∫–∞–∫ None - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ
    —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ""
    """
    if task_timestamp is None:
        return ""
    return get_datetime(task_timestamp).strftime("%d.%m.%Y %H:%M")

def save_to_csv(file_path, rows):
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    log(f"–ó–∞–ø–∏—Å—å –≤ CSV: {file_path}")
    with open(file_path, "w", newline="", encoding="utf-8-sig") as f:
        writer = csv.writer(f)
        writer.writerows(rows)

def read_csv(file_path):
    if not os.path.isfile(file_path):
        log(f'‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: "{file_path}"')
        return []

    rows = []
    log(f"–ß—Ç–µ–Ω–∏–µ CSV: {file_path}")
    with open(file_path, "r", newline="", encoding="utf-8-sig") as f:
        reader = csv.reader(f)
        rows.extend(reader)

    return rows

# NOTE(const): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ç–æ—Ä—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º True/False, –æ–∑–Ω–∞—á–∞—é—â–∏–π —É—Å–ø–µ—Ö/–ø—Ä–æ–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def _fetch_data(url, retries=5, backoff=2):
    log(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º URL: {url}")
    for i in range(retries):
        r = requests.get(url, headers=HEADERS)
        if r.status_code == 429:
            wait = int(r.headers.get("Retry-After", backoff))
            log(f"‚ö†Ô∏è 429 ‚Äî —Å–ø–∏–º {wait}s (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries})")
            sleep(wait)
            continue
        try:
            r.raise_for_status()
            return r.json(), True
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
            break
    log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    return {}, False

# TODO(const): –°–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–µ—Ç–æ–¥ —Å–∞–º –º–æ–≥ –ø–æ–Ω—è—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ query –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º url –∏–ª–∏ –Ω–µ—Ç?
def _fetch_data_page(url_with_query, limit=1000, offset=0):
    """
    NOTE(const): url_with_query - —ç—Ç–æ url, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ query `?...` -
    —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–π f"limit={limit}&offset={offset}"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ content –∏ True/False, –æ–∑–Ω–∞—á–∞—é—â–∏–π, –µ—Å—Ç—å –ª–∏ –µ—â—ë –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–∞–Ω–Ω–æ–≥–æ page
    """
    final_url = f"{url_with_query}&limit={limit}&offset={offset}"
    data, success = _fetch_data(final_url)

    # NOTE(const): –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ page –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—Å–ø–µ—Ö
    while not success:
        wait = 10
        log(f"–ñ–¥—ë–º {wait}s –∏ –≤–Ω–æ–≤—å –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ...")
        sleep(wait)
        data, success = _fetch_data(final_url)

    return data.get("content", []), data.get("paging", {}).get("next")

# TODO(const): –°–º. –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É _fetch_data_page –≤—ã—à–µ
def _fetch_data_in_pages(url_with_query, limit=1000, offset=0):
    content = []
    while True:
        chunk, has_next_page = _fetch_data_page(url_with_query, limit=limit, offset=offset)
        if not chunk:
            break
        content.extend(chunk)
        if not has_next_page:
            break
        offset += limit
    return content

def fetch_columns(boardId):
    log(f'–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –¥–æ—Å–∫–∏ "{boardId}"')
    url = f"{BASE_URL}/columns?boardId={boardId}"
    columns = _fetch_data_in_pages(url)
    log(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {len(columns)}")
    return columns

def get_columns_without_checking_deadline_ids(columns):
    result_columns = []
    for column in columns:
        if column.get("id", "") in EXCLUDE_COLUMNS_WITH_IDS:
            log(f'–ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–æ–ª–æ–Ω–∫—É "{column["id"]}" ("{column["title"]}")')
            continue

        if column.get("id") in COLUMNS_TO_CHECK_DEADLINE_IDS:
            log(f'–ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "{column["id"]}" ("{column["title"]}") –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞')
            continue

        result_columns.append(column.get("id"))

    return result_columns

def fetch_tasks(columns_ids):
    log("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–¥–∞—á...")
    tasks = []
    for column_id in columns_ids:
        # NOTE(const): –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ `/api-v2/tasks` deprecated –∏ —á—Ç–æ
        # –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/api-v2/task-list` –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ
        url = f"{BASE_URL}/task-list?columnId={column_id}"

        # NOTE(const): –ù–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —É–¥–æ–±–Ω–µ–µ –±—ã–ª–æ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å
        #tasks, _ = _fetch_data_page(url, limit=100, offset=1710)

        tasks.extend(_fetch_data_in_pages(url))

    log(f"–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
    return tasks

def get_recent_tasks(tasks, deadline_days_offset):
    """
    NOTE(const): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–∫–æ–∫ –∑–∞–¥–∞—á, —É –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–¥–ª–∞–π–Ω —É–∫–∞–∑–∞–Ω –ø–æ–∑–∂–µ, —á–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    –º–∏–Ω—É—Å deadline_days_offset –¥–Ω–µ–π
    """
    today = dt.datetime.now(dt.UTC)
    today_minus_offset_days = today - dt.timedelta(days=deadline_days_offset)
    recent_tasks = []
    for task in tasks:
        task_id = task.get("id")

        # NOTE(const): –ß—Ç–æ–±—ã –∑–∞–¥–∞—á–∏ –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞ —É—á–∏—Ç—ã–≤–∞–ª–∏—Å—å –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ "< X –º–µ—Å—è—Ü–µ–≤", —É–∫–∞–∑—ã–≤–∞—é
        # –∑–¥–µ—Å—å —É –Ω–∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–µ–¥–ª–∞–π–Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        deadline_datetime = today
        if "deadline" in task and "deadline" in task["deadline"]:
            deadline_datetime = get_datetime(task["deadline"]["deadline"])

        if deadline_datetime > today_minus_offset_days:
            recent_tasks.append(task)

    return recent_tasks

# NOTE(const): –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ `/api-v2/task-list` –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —á–µ–º
# –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ `/api-v2/tasks/{id}` - –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –º—ã
# –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è `idTaskCommon` –∏ `idTaskProject`
def fetch_full_task(task_id):
    data, _ = _fetch_data(f"{BASE_URL}/tasks/{task_id}")
    return data

def _try_fetch_full_tasks(tasks_ids):
    """
    NOTE(const): –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ —Å–ø–∏—Å–æ–∫ id –≤—Å–µ—Ö –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á,
    —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–ª—è –Ω–∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
    """
    tasks = []
    missing_tasks_ids = []
    offset = 0
    for idx, task_id in enumerate(tasks_ids, 1):
        task = fetch_full_task(task_id)
        if task == {}:
            missing_tasks_ids.append(task_id)
            continue
        tasks.append(task)
        title = task.get("title", "")
        log(f"[{idx}/{len(tasks_ids)}] ‚úÖ {title}")

    log(f"–ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(tasks)}/{len(tasks_ids)}")
    return tasks, missing_tasks_ids

# TODO(const): –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è wait?
# TODO(const): –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º?
def fetch_full_tasks_by_ids(tasks_ids):
    log(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {len(tasks_ids)} –∑–∞–¥–∞—á...")
    full_tasks, missing_tasks_ids = _try_fetch_full_tasks(tasks_ids)

    # NOTE(const): –ï—Å–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞–¥–∞—á–∏ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ—Ç–æ–¥–æ–º fetch_full_task() –∏–∑-–∑–∞ –∫–æ–¥–∞ 429,
    # —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–ª—è –Ω–∏—Ö –∑–∞–ø—Ä–æ—Å—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    while len(missing_tasks_ids) > 0:
        wait = 10
        log(f"–ñ–¥—ë–º {wait}s –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {len(missing_tasks_ids)} –∑–∞–¥–∞—á...")
        sleep(wait)
        remaining_tasks, missing_tasks_ids = _try_fetch_full_tasks(missing_tasks_ids)
        full_tasks.extend(remaining_tasks)

    log(f"–ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(full_tasks)}/{len(tasks_ids)}")
    return full_tasks

def fetch_full_tasks(tasks):
    """
    NOTE(const): –î–ª—è –≤—Å–µ—Ö —Ç–∞—Å–∫–æ–≤ –∏–∑ tasks –≤—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É
    """
    return fetch_full_tasks_by_ids([task.get("id") for task in tasks])

def fetch_stickers():
    stickers = []
    log("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤...")

    # NOTE(const): –î–æ–±–∞–≤–∏—Ç –≤ –∫–æ–Ω—Ü–µ "?", —á—Ç–æ–±—ã –≤ _fetch_data_in_pages() –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏—Å—å
    # —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è limit –∏ offset
    url = f"{BASE_URL}/string-stickers?"

    stickers = _fetch_data_in_pages(url)
    log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø —Å—Ç–∏–∫–µ—Ä–æ–≤: {len(stickers)}")
    return stickers

def get_stickers_groups(stickers):
    groups_names = {}
    groups_values = {}
    values_count = 0
    for group in stickers:
        group_id = group["id"]
        groups_names[group_id] = group.get("name", "")

        values = {}
        states = group.get("states", [])
        for state in states:
            values[state["id"]] = state.get("name", "")

        groups_values[group_id] = values
        values_count += len(values)

    log(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {values_count}")
    return groups_names, groups_values

def get_tasks_csv_rows(tasks, stickers):
    sticker_groups_names, sticker_groups_values = get_stickers_groups(stickers)

    # NOTE(const): –£—á–∏—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å —Ç–∞–∫–∂–µ —Å—Ç–∏–∫–µ—Ä—ã HARDCODED_STICKERS, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –ø–æ API
    all_sticker_groups_names = { **sticker_groups_names, **HARDCODED_STICKERS }

#    for group_id in all_sticker_groups_names:
#        print(f"`{group_id}`, `{all_sticker_groups_names[group_id]}`, {len(sticker_groups_values[group_id])} —à—Ç—É–∫")
#        print(f"`{all_sticker_groups_names[group_id]}`:")
#        group_values = sticker_groups_values[group_id]
#        for value_id in group_values:
#            print(f"`{value_id}`, {group_values[value_id]}")

    sorted_sticker_groups_names = sorted(set(all_sticker_groups_names.values()))

    group_id_for_name = {}
    for group_id in all_sticker_groups_names:
        group_id_for_name[all_sticker_groups_names[group_id]] = group_id

    sorted_stickers_groups_ids = []
    for group_name in sorted_sticker_groups_names:
        sorted_stickers_groups_ids.append(group_id_for_name[group_name])

#    for idx, group_id in enumerate(sorted_stickers_groups_ids):
#        print(f"`{group_id}`, `{sorted_sticker_groups_names[idx]}`")

    task_headers = [CSV_TASK_ID_HEADER, "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–µ–¥–ª–∞–π–Ω", "–ü—Ä–æ–µ–∫—Ç–Ω—ã–π ID"]
    #sticker_headers = [f'–°—Ç–∏–∫–µ—Ä "{name}"' for name in sorted_sticker_groups_names]
    sticker_headers = sorted_sticker_groups_names
    all_headers = task_headers + sticker_headers
    rows = []
    rows.append(all_headers)
    for task in tasks:
        task_id = task.get("id")

        deadline_timestamp = None
        if "deadline" in task and "deadline" in task["deadline"]:
            deadline_timestamp = task["deadline"]["deadline"]
        #deadline_timestamp_str = "" if deadline_timestamp is None else str(deadline_timestamp)

        title    = task.get("title", "")
        deadline = format_timestamp(deadline_timestamp)
        proj_id  = task.get("idTaskProject", "")

        row = [task_id, title, deadline, proj_id]

        task_stickers = task.get("stickers", {})

        # NOTE(const): –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –∑–∞–¥–∞—á–∞—Ö id —Å—Ç–∏–∫–µ—Ä–æ–≤ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞–º–∏ —á–µ—Ä–µ–∑
        # –∑–∞–ø—Ä–æ—Å —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ API –∏ —á–µ—Ä–µ–∑ HARDCODED_STICKERS
        for task_sticker_id in task_stickers:
            if (task_sticker_id not in sorted_stickers_groups_ids):
                log(f'‚ùå –°—Ç–∏–∫–µ—Ä —Å id `{task_sticker_id}` –≤ –∑–∞–¥–∞—á–µ —Å id `{task_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏'
                    + ' –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –≤ —Å–∫—Ä–∏–ø—Ç–µ —Å—Ç–∏–∫–µ—Ä–æ–≤:\n    `{}`'.format("`,\n    `".join(sorted_stickers_groups_ids)))

        for group_id in sorted_stickers_groups_ids:
            group_values = sticker_groups_values.get(group_id, {})
            value = ""

            # NOTE(const): –ï—Å–ª–∏ group_values –ø—É—Å—Ç–æ–π, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —Å—Ç–∏–∫–µ—Ä –∏–∑
            # HARDCODED_STICKERS - –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–¥—ë—Ç –Ω–µ id —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∞
            # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∏–∫–µ—Ä–∞
            if group_values:
                value_id = task_stickers.get(group_id, "")
                value = group_values.get(value_id, "")
            else:
                value = task_stickers.get(group_id, "")

            row.append(value)

        rows.append(row)

    return rows

def get_tasks_rows_from_file(csv_file_path, task_id_header=CSV_TASK_ID_HEADER):
    csv_rows = read_csv(csv_file_path)
    if not csv_rows:
        log(f'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª–µ: "{csv_file_path}"')
        return []
    csv_headers = csv_rows[0]
    if not task_id_header in csv_headers:
        log(f'‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ "{task_id_header}" –≤ CSV —Ñ–∞–π–ª–µ: "{csv_file_path}"')
        return []
    return csv_rows

def are_headers_match(headers1, headers2):
    if len(headers1) == len(headers2):
        for idx in range(len(headers1)):
            if headers1[idx] != headers2[idx]:
                return False
        return True
    return False

def combine_tasks_rows(new_csv_rows, all_old_csv_rows, task_id_header=CSV_TASK_ID_HEADER):
    csv_headers = new_csv_rows[0]
    task_id_idx = csv_headers.index(task_id_header)
    new_tasks_ids = [row[task_id_idx] for row in new_csv_rows[1:]]

    result_rows = new_csv_rows[:]
    used_old_rows_count = 0
    for old_row in all_old_csv_rows[1:]:
        old_task_id = old_row[task_id_idx]
        if not old_task_id in new_tasks_ids:
            result_rows.append(old_row)
            used_old_rows_count += 1

    log(f"–û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(new_tasks_ids)} –∑–∞–¥–∞—á –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"
        + f" –æ—Å—Ç–∞–ª—å–Ω—ã—Ö {used_old_rows_count} –∑–∞–¥–∞—á –∏–∑ CSV —Ñ–∞–π–ª–∞")
    return result_rows

def get_combined_tasks_csv_rows(tasks, stickers, old_csv_rows):
    new_csv_rows = get_tasks_csv_rows(tasks, stickers)

    old_csv_headers = old_csv_rows[0]
    new_csv_headers = new_csv_rows[0]
    if not are_headers_match(old_csv_headers, new_csv_headers):
        log(f'‚ùå CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç:\n - –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ: "{old_csv_headers}"\n - –Ω–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: "{new_csv_headers}"')
        return []

    result_rows = combine_tasks_rows(new_csv_rows, old_csv_rows)
    return result_rows

def main():
    # NOTE(const): –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ "–ê–ë-1234", —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å id —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è HARDCODED_STICKERS
    #test_task = fetch_full_task("88888888-8888-8888-8888-888888888888")
    #with open(os.path.join(r".", "test_task.json"), "w", newline="", encoding="utf-8-sig") as f:
    #    json.dump(test_task, f, ensure_ascii=False, indent=4)

    # NOTE(const): –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –¥–æ—Å–∫–∏, –≥–¥–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ —Å—Ç–æ–∏—Ç
    # true - –Ω–æ id –≤—Å–µ—Ö HARDCODED_STICKERS –µ—Å—Ç—å –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ, –∞ —Ç–∞–∫–∂–µ –∏–º–µ—é—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ id
    #board_data, _ = _fetch_data(f"{BASE_URL}/boards/{BOARD_ID}")
    #board_stickers = board_data.get('stickers')
    #with open(os.path.join(r".", "board_stickers.json"), "w", newline="", encoding="utf-8-sig") as f:
    #    json.dump(board_stickers, f, ensure_ascii=False, indent=4)

    log("üöÄ –°—Ç–∞—Ä—Ç –≤—ã–≥—Ä—É–∑–∫–∏ Yougile...")

    board_columns = fetch_columns(BOARD_ID)

    # NOTE(const): –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ  –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    #columns_without_checking_deadline_ids = []
    columns_without_checking_deadline_ids = get_columns_without_checking_deadline_ids(board_columns)

    # NOTE(const): –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –±–µ–∑
    # –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–∞, –∫–∞–∫ —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞–¥–∞—á –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ì–æ—Ç–æ–≤–æ"
    #tasks_to_check_deadline = fetch_tasks([])
    tasks_to_check_deadline = fetch_tasks(COLUMNS_TO_CHECK_DEADLINE_IDS)

    tasks_without_checking_deadline = fetch_tasks(columns_without_checking_deadline_ids)

    stickers = fetch_stickers()

    new_csv_rows = []
    if os.path.isfile(CSV_FILE_PATH):
        log(f'–§–∞–π–ª "{CSV_FILE_PATH}" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -> –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–æ–º < 2 –º–µ—Å—è—Ü–µ–≤')

        recent_tasks = get_recent_tasks(tasks_to_check_deadline, 60)
        log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(recent_tasks)} –∑–∞–¥–∞—á —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –º–µ–Ω—å—à–µ 2 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥")

        tasks_to_update = recent_tasks + tasks_without_checking_deadline

        old_csv_rows = get_tasks_rows_from_file(CSV_FILE_PATH)
        if not old_csv_rows:
            log(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ CSV —Ñ–∞–π–ª–∞ "{CSV_FILE_PATH}"')
            exit(1)

        # NOTE(const): –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ
        # –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
        #new_csv_rows = get_combined_tasks_csv_rows(tasks_to_update, stickers, old_csv_rows)

        full_tasks_to_update = fetch_full_tasks(tasks_to_update)
        new_csv_rows = get_combined_tasks_csv_rows(full_tasks_to_update, stickers, old_csv_rows)
        if not new_csv_rows:
            log(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á –∏–∑ CSV —Ñ–∞–π–ª–∞ "{CSV_FILE_PATH}"')
            exit(1)

        backup_csv_file_path = f"{CSV_FILE_PATH}.backup"
        log(f'–°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "{backup_csv_file_path}"')
        save_to_csv(backup_csv_file_path, old_csv_rows)
    else:
        log(f'–§–∞–π–ª "{CSV_FILE_PATH}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç -> –≤—ã–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á')

        # NOTE(const): –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –¥–µ–¥–ª–∞–π–Ω–æ–≤
        tasks_to_save = tasks_to_check_deadline + tasks_without_checking_deadline

        # NOTE(const): –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∑–∏—Ç—å –Ω–µ –≤—Å–µ –∑–∞–¥–∞—á–∏, –∞ —Ç–æ–ª—å–∫–æ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º < 2
        # –º–µ—Å—è—Ü–µ–≤, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–±—ã—Å—Ç—Ä–µ–µ
        #recent_tasks = get_recent_tasks(tasks_to_check_deadline, 60)
        #full_tasks_to_save = fetch_full_tasks(recent_tasks)

        # NOTE(const): –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∂–∞–ª–∏—Å—å –Ω–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –ø–æ –æ–¥–Ω–æ–π, –∞ –æ–±—â–∏–º
        # –∑–∞–ø—Ä–æ—Å–æ–º, —á—Ç–æ –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
        #new_csv_rows = get_tasks_csv_rows(tasks_to_save, stickers)

        full_tasks_to_save = fetch_full_tasks(tasks_to_save)
        new_csv_rows = get_tasks_csv_rows(full_tasks_to_save, stickers)

        log(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö {len(tasks_to_save)} –∑–∞–¥–∞—á")

    save_to_csv(CSV_FILE_PATH, new_csv_rows)
    log("üéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

if __name__ == "__main__":
    main()
